SET @rank := 0;
SELECT rank, name, pts, avg, trnys
FROM (
SELECT @rank := @rank + 1 AS rank, id, name, pts, avg, trnys
FROM
(SELECT u.id, u.name, IFNULL(a.points, 0) AS pts, IFNULL(a.points/a.trnys, 0) AS avg, IFNULL(a.trnys, 0) AS trnys
FROM jml_users u LEFT JOIN
    (SELECT u.id, SUM(CASE WHEN (t.tournamentDesc IS NULL OR t.tournamentDesc <> 'Championship') THEN CASE WHEN r.place BETWEEN 1 AND 8 THEN CASE WHEN t.tournamentdesc LIKE '%Main Event%' THEN (np.numPlayers-r.place+4)*2 ELSE np.numPlayers-r.place+4 END ELSE CASE WHEN t.tournamentdesc LIKE '%Main Event%' THEN (np.numPlayers-r.place+1)*2 ELSE np.numPlayers-r.place+1 END END END) AS points, nt.trnys
    FROM jml_users u
    INNER JOIN poker_result r ON u.id = r.playerId
    INNER JOIN poker_tournament t ON r.tournamentId = t.tournamentId AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31'
    INNER JOIN (SELECT r1.playerId, COUNT(*) AS trnys FROM poker_result r1 INNER JOIN poker_tournament t1 ON r1.TournamentId = t1.TournamentId AND r1.place > 0 AND t1.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY r1.playerId) nt ON r.playerId = nt.playerId
    INNER JOIN (SELECT tournamentId, COUNT(*) AS numPlayers FROM poker_result WHERE place > 0 GROUP BY tournamentId) np ON r.tournamentId = np.tournamentId
    GROUP BY r.playerId) a ON u.id = a.id
ORDER BY pts DESC) z) y
WHERE y.id = 100;

SET @rank := 0;
SELECT rank, name, ko, avg, trnys
FROM (
SELECT @rank := @rank + 1 AS rank, id, name, ko, avg, trnys
FROM
(SELECT u.id, u.name, IFNULL(kO, 0) AS kO, IFNULL(avg, 0) AS avg, IFNULL(trnys, 0) AS trnys
FROM jml_users u LEFT JOIN
    (SELECT id, k.knockouts AS kO, k.knockouts / nt.numTourneys AS avg, nt.numTourneys AS trnys
    FROM (SELECT u.id, u.name, COUNT(*) AS knockouts FROM poker_tournament t INNER JOIN poker_result r ON t.tournamentId = r.tournamentId AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' AND r.place > 0 INNER JOIN jml_users u ON r.knockedOutBy = u.id GROUP BY r.knockedOutBy) k INNER JOIN (SELECT r.playerId, COUNT(*) AS numTourneys FROM poker_tournament t INNER JOIN poker_result r ON t.tournamentId = r.tournamentId AND r.place > 0 AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY r.playerId) nt ON k.Id = nt.PlayerId) a ON u.id = a.id
ORDER BY ko DESC) z) y;
-- WHERE y.id = 100;

-- SET @rank := 0;
SET @rownum := 0;
SELECT row, rank, name, earns, avg, trnys
FROM (
SELECT @rownum := @rownum + 1 AS row,
@rank := IF(@prev_val != earns, @rownum, @rank) AS rank, id, name, @prev_val := earns AS earns, avg, trnys
FROM
(SELECT u.id, u.name, IFNULL(earns, 0) AS earns, IFNULL(earns / trnys, 0) AS avg, IFNULL(trnys, 0) AS trnys FROM jml_users u LEFT JOIN (SELECT id, SUM(totalEarnings) AS earns, numTourneys AS trnys FROM (SELECT id, name, SUM(earnings) AS totalEarnings, MAX(earnings) AS maxEarnings, numTourneys FROM (SELECT p.id, p.name, ((np.numPlayers * (t.buyinAmount - (t.buyinAmount * t.rake))) + (CASE WHEN nr.numRebuys IS NULL THEN 0 ELSE nr.numRebuys END * (t.rebuyAmount - (t.rebuyAmount * t.rake))) + (CASE WHEN na.numAddons IS NULL THEN 0 ELSE na.numAddons END * (t.addonAmount - (t.addonAmount * t.rake)))) * CASE WHEN s.percentage IS NULL THEN 0 ELSE s.percentage END AS Earnings, nt.NumTourneys FROM jml_users p INNER JOIN poker_result r ON p.id = r.playerId INNER JOIN poker_tournament t ON r.tournamentId = t.tournamentId AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' INNER JOIN (SELECT r1.playerId, COUNT(*) AS NumTourneys FROM poker_result r1 INNER JOIN poker_tournament t1 ON r1.tournamentId = t1.tournamentId AND r1.place > 0 AND t1.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY r1.playerId) nt ON r.playerId = nt.playerId INNER JOIN (SELECT r2.tournamentId, COUNT(*) AS numPlayers FROM poker_result r2 WHERE r2.place > 0 GROUP BY r2.tournamentId) np ON r.tournamentId = np.tournamentId LEFT JOIN (SELECT r3.tournamentId, SUM(r3.rebuyCount) AS numRebuys FROM poker_result r3 WHERE r3.place > 0 AND r3.rebuyCount > 0 GROUP BY r3.tournamentId) nr ON r.tournamentId = nr.tournamentId LEFT JOIN (SELECT tournamentId, COUNT(AddonFlag) AS numAddons FROM poker_result WHERE AddonFlag = 'Y' GROUP BY tournamentId) na ON r.tournamentId = na.tournamentId LEFT JOIN (SELECT a.tournamentId, s1.payoutId, s1.place, s1.percentage FROM (SELECT np.tournamentId, CASE WHEN np.numPlayers >= 20 THEN p.payoutId ELSE p2.payoutId END AS payoutId FROM (SELECT r.tournamentId, COUNT(*) AS numPlayers FROM poker_result r WHERE r.statusCode IN ('R','F') GROUP BY r.tournamentId) np INNER JOIN poker_tournament t on np.tournamentId = t.tournamentId INNER JOIN poker_payout p ON t.payoutId = p.payoutId LEFT JOIN poker_payout p2 ON t.altPayoutId = p2.payoutId) a INNER JOIN poker_structure s1 ON a.payoutId = s1.payoutId) s ON r.tournamentId = s.tournamentId AND r.place = s.place WHERE r.place > 0) y GROUP BY id UNION SELECT xx.id, xx.name, SUM(xx.earnings) AS totalEarnings, MAX(xx.earnings) AS maxEarnings, 0 FROM (SELECT YEAR(t.tournamentDate) AS Yr, p.Id, p.name, (SELECT SUM(total) AS 'Total Pool' FROM (SELECT YEAR(t2.tournamentDate) AS Yr, t2.tournamentId AS Id, CASE WHEN b.Play IS NULL THEN 0 ELSE b.Play END, ((t2.BuyinAmount * t2.rake) * Play) + ((t2.rebuyAmount * t2.rake) * CASE WHEN nr.numRebuys IS NULL THEN 0 ELSE nr.numRebuys END) + ((t2.addonAmount * t2.rake) * CASE WHEN na.numAddons IS NULL THEN 0 ELSE na.numAddons END) AS Total FROM poker_tournament t2 LEFT JOIN (SELECT tournamentId, COUNT(*) AS Play FROM poker_result WHERE buyinPaid = 'Y' AND place > 0 GROUP BY tournamentId) b ON t2.tournamentId = b.tournamentId AND t2.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' LEFT JOIN (SELECT r.tournamentId, SUM(r.rebuyCount) AS numRebuys FROM poker_result r WHERE r.rebuyPaid = 'Y' AND r.rebuyCount > 0 GROUP BY r.tournamentId) nr ON t2.tournamentId = nr.tournamentId LEFT JOIN (SELECT r.tournamentId, COUNT(*) AS numAddons FROM poker_result r WHERE r.AddonPaid = 'Y' GROUP BY r.tournamentId) na ON t2.tournamentId = na.tournamentId) zz WHERE zz.yr = YEAR(t.tournamentDate) GROUP BY zz.yr) * CASE WHEN s.percentage IS NULL THEN 0 ELSE s.percentage END AS Earnings FROM jml_users p INNER JOIN poker_result r ON p.id = r.playerId INNER JOIN poker_tournament t ON r.tournamentId = t.tournamentId AND t.tournamentDesc = 'Championship' AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' LEFT JOIN (SELECT a.tournamentId, s1.payoutId, s1.place, s1.percentage FROM (SELECT np.tournamentId, CASE WHEN np.numPlayers >= 20 THEN p.payoutId ELSE p2.payoutId END AS payoutId FROM (SELECT r.tournamentId, COUNT(*) AS numPlayers FROM poker_result r WHERE r.statusCode IN ('R','F') GROUP BY r.tournamentId) np INNER JOIN poker_tournament t on np.tournamentId = t.tournamentId AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' INNER JOIN poker_payout p ON t.payoutId = p.payoutId LEFT JOIN poker_payout p2 ON t.altPayoutId = p2.payoutId) a INNER JOIN poker_structure s1 ON a.payoutId = s1.payoutId) s ON r.tournamentId = s.tournamentId AND r.place = s.place WHERE r.place > 0 GROUP BY id, yr) xx GROUP BY xx.id, xx.name) cc GROUP BY id, name) z ON u.id = z.id
ORDER BY earns DESC) z) y;
-- WHERE y.id = 100;

-- SET @rank := 0;
SET @rownum := 0;
-- SELECT row, rank, id, name, wins, avg, trnys
-- FROM (
SELECT @rownum := @rownum + 1 AS row,
@rank := IF(@prev_val != wins, @rownum, @rank) AS rank, id, name, @prev_val := wins AS wins, avg, trnys
FROM
(SELECT u.id, u.name, IFNULL(wins, 0) AS wins, IFNULL(wins / trnys, 0) AS avg, IFNULL(trnys, 0) AS trnys FROM jml_users u LEFT JOIN ( SELECT r.playerId, COUNT(*) AS wins, numTourneys AS trnys FROM poker_tournament t INNER JOIN poker_result r ON t.tournamentId = r.tournamentId AND r.place = 1 AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' INNER JOIN (SELECT r.playerId, COUNT(*) AS numTourneys FROM poker_result r INNER JOIN poker_tournament t ON r.tournamentId = t.tournamentId AND r.place > 0 AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY r.playerId) nt ON r.playerId = nt.playerId GROUP BY r.playerId) a ON u.id = a.playerId
ORDER BY avg DESC) z;-- INNER JOIN (SELECT @rank := 0) ranking;-- ) y;
-- WHERE y.id = 100;

SELECT @rownum := @rownum + 1 AS row,
@rank := IF(@prev_val != wins, @rownum, @rank) AS rank,
id, name, @prev_val := wins AS wins, avg, trnys
FROM 
(SELECT u.id, u.name, IFNULL(wins, 0) AS wins, IFNULL(wins / trnys, 0) AS avg, IFNULL(trnys, 0) AS trnys FROM jml_users u LEFT JOIN ( SELECT r.playerId, COUNT(*) AS wins, numTourneys AS trnys FROM poker_tournament t INNER JOIN poker_result r ON t.tournamentId = r.tournamentId AND r.place = 1 AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' INNER JOIN (SELECT r.playerId, COUNT(*) AS numTourneys FROM poker_result r INNER JOIN poker_tournament t ON r.tournamentId = t.tournamentId AND r.place > 0 AND t.tournamentDate BETWEEN '2012-01-01' AND '2012-12-31' GROUP BY r.playerId) nt ON r.playerId = nt.playerId GROUP BY r.playerId) a ON u.id = a.playerId
ORDER BY avg DESC) z INNER JOIN (SELECT @rownum := 0, @prev_val := 0) y;
-- WHERE z.id = 100;


SELECT @rownum := @rownum + 1 AS row, @rank := IF(@prev_val != earns, @rownum, @rank) AS rank, id, name, @prev_val := earns AS earns, avg, trnys FROM (SELECT u.id, u.name, IFNULL(earns, 0) AS earns, IFNULL(earns / trnys, 0) AS avg, IFNULL(trnys, 0) AS trnys FROM jml_users u LEFT JOIN (SELECT id, SUM(totalEarnings) AS earns, numTourneys AS trnys FROM (SELECT id, name, SUM(earnings) AS totalEarnings, MAX(earnings) AS maxEarnings, numTourneys FROM (SELECT p.id, p.name, ((np.numPlayers * (t.buyinAmount - (t.buyinAmount * t.rake))) + (CASE WHEN nr.numRebuys IS NULL THEN 0 ELSE nr.numRebuys END * (t.rebuyAmount - (t.rebuyAmount * t.rake))) + (CASE WHEN na.numAddons IS NULL THEN 0 ELSE na.numAddons END * (t.addonAmount - (t.addonAmount * t.rake)))) * CASE WHEN s.percentage IS NULL THEN 0 ELSE s.percentage END AS Earnings, nt.NumTourneys FROM jml_users p INNER JOIN poker_result r ON p.id = r.playerId INNER JOIN poker_tournament t ON r.tournamentId = t.tournamentId INNER JOIN (SELECT r1.playerId, COUNT(*) AS NumTourneys FROM poker_result r1 INNER JOIN poker_tournament t1 ON r1.tournamentId = t1.tournamentId AND r1.place > 0 GROUP BY r1.playerId) nt ON r.playerId = nt.playerId INNER JOIN (SELECT r2.tournamentId, COUNT(*) AS numPlayers FROM poker_result r2 WHERE r2.place > 0 GROUP BY r2.tournamentId) np ON r.tournamentId = np.tournamentId LEFT JOIN (SELECT r3.tournamentId, SUM(r3.rebuyCount) AS numRebuys FROM poker_result r3 WHERE r3.place > 0 AND r3.rebuyCount > 0 GROUP BY r3.tournamentId) nr ON r.tournamentId = nr.tournamentId LEFT JOIN (SELECT tournamentId, COUNT(AddonFlag) AS numAddons FROM poker_result WHERE AddonFlag = 'Y' GROUP BY tournamentId) na ON r.tournamentId = na.tournamentId LEFT JOIN (SELECT a.tournamentId, s1.payoutId, s1.place, s1.percentage FROM (SELECT np.tournamentId, CASE WHEN np.numPlayers >= 20 THEN p.payoutId ELSE p2.payoutId END AS payoutId FROM (SELECT r.tournamentId, COUNT(*) AS numPlayers FROM poker_result r WHERE r.statusCode IN ('R','F') GROUP BY r.tournamentId) np INNER JOIN poker_tournament t on np.tournamentId = t.tournamentId INNER JOIN poker_payout p ON t.payoutId = p.payoutId LEFT JOIN poker_payout p2 ON t.altPayoutId = p2.payoutId) a INNER JOIN poker_structure s1 ON a.payoutId = s1.payoutId) s ON r.tournamentId = s.tournamentId AND r.place = s.place WHERE r.place > 0) y GROUP BY id UNION SELECT xx.id, xx.name, SUM(xx.earnings) AS totalEarnings, MAX(xx.earnings) AS maxEarnings, 0 FROM (SELECT YEAR(t.tournamentDate) AS Yr, p.Id, p.name, (SELECT SUM(total) AS 'Total Pool' FROM (SELECT YEAR(t2.tournamentDate) AS Yr, t2.tournamentId AS Id, CASE WHEN b.Play IS NULL THEN 0 ELSE b.Play END, ((t2.BuyinAmount * t2.rake) * Play) + ((t2.rebuyAmount * t2.rake) * CASE WHEN nr.numRebuys IS NULL THEN 0 ELSE nr.numRebuys END) + ((t2.addonAmount * t2.rake) * CASE WHEN na.numAddons IS NULL THEN 0 ELSE na.numAddons END) AS Total FROM poker_tournament t2 LEFT JOIN (SELECT tournamentId, COUNT(*) AS Play FROM poker_result WHERE buyinPaid = 'Y' AND place > 0 GROUP BY tournamentId) b ON t2.tournamentId = b.tournamentId LEFT JOIN (SELECT r.tournamentId, SUM(r.rebuyCount) AS numRebuys FROM poker_result r WHERE r.rebuyPaid = 'Y' AND r.rebuyCount > 0 GROUP BY r.tournamentId) nr ON t2.tournamentId = nr.tournamentId LEFT JOIN (SELECT r.tournamentId, COUNT(*) AS numAddons FROM poker_result r WHERE r.AddonPaid = 'Y' GROUP BY r.tournamentId) na ON t2.tournamentId = na.tournamentId) zz WHERE zz.yr = YEAR(t.tournamentDate) GROUP BY zz.yr) * CASE WHEN s.percentage IS NULL THEN 0 ELSE s.percentage END AS Earnings FROM jml_users p INNER JOIN poker_result r ON p.id = r.playerId INNER JOIN poker_tournament t ON r.tournamentId = t.tournamentId AND t.tournamentDesc = 'Championship' LEFT JOIN (SELECT a.tournamentId, s1.payoutId, s1.place, s1.percentage FROM (SELECT np.tournamentId, CASE WHEN np.numPlayers >= 20 THEN p.payoutId ELSE p2.payoutId END AS payoutId FROM (SELECT r.tournamentId, COUNT(*) AS numPlayers FROM poker_result r WHERE r.statusCode IN ('R','F') GROUP BY r.tournamentId) np INNER JOIN poker_tournament t on np.tournamentId = t.tournamentId INNER JOIN poker_payout p ON t.payoutId = p.payoutId LEFT JOIN poker_payout p2 ON t.altPayoutId = p2.payoutId) a INNER JOIN poker_structure s1 ON a.payoutId = s1.payoutId) s ON r.tournamentId = s.tournamentId AND r.place = s.place WHERE r.place > 0 GROUP BY id, yr) xx GROUP BY xx.id, xx.name) cc GROUP BY id, name) z ON u.id = z.id ORDER BY earns DESC) z INNER JOIN (SELECT @rownum := 0, @prev_val := 0, @rank := 0) y;


